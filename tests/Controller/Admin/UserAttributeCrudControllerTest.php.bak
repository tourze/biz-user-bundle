<?php

namespace BizUserBundle\Tests\Controller\Admin;

use BizUserBundle\Controller\Admin\UserAttributeCrudController;
use BizUserBundle\Entity\BizUser;
use BizUserBundle\Entity\UserAttribute;
use BizUserBundle\Repository\UserAttributeRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use PHPUnit\Framework\TestCase;

class UserAttributeCrudControllerTest extends TestCase
{
    private UserAttributeCrudController $controller;
    private EntityManagerInterface $entityManager;
    private UserAttributeRepository $repository;

    protected function setUp(): void
    {
        $this->entityManager = $this->createMock(EntityManagerInterface::class);
        $this->repository = $this->createMock(UserAttributeRepository::class);
        $this->controller = new UserAttributeCrudController();
    }

    public function testGetEntityFqcn(): void
    {
        $this->assertSame(UserAttribute::class, UserAttributeCrudController::getEntityFqcn());
    }

    public function testConfigureCrud(): void
    {
        $crud = $this->createMock(Crud::class);
        $result = $this->controller->configureCrud($crud);
        
        $this->assertInstanceOf(Crud::class, $result);
    }

    public function testConfigureFields(): void
    {
        $fields = iterator_to_array($this->controller->configureFields(Crud::PAGE_INDEX));
        
        $this->assertNotEmpty($fields);
        $this->assertGreaterThanOrEqual(4, count($fields));
    }

    public function testConfigureFieldsForNewPage(): void
    {
        $fields = iterator_to_array($this->controller->configureFields(Crud::PAGE_NEW));
        
        $this->assertNotEmpty($fields);
    }

    public function testConfigureFieldsForEditPage(): void
    {
        $fields = iterator_to_array($this->controller->configureFields(Crud::PAGE_EDIT));
        
        $this->assertNotEmpty($fields);
    }

    public function testConfigureFieldsForDetailPage(): void
    {
        $fields = iterator_to_array($this->controller->configureFields(Crud::PAGE_DETAIL));
        
        $this->assertNotEmpty($fields);
        $this->assertGreaterThan(8, count($fields));
    }

    public function testConfigureFilters(): void
    {
        $filters = $this->createMock(\EasyCorp\Bundle\EasyAdminBundle\Config\Filters::class);
        $result = $this->controller->configureFilters($filters);
        
        $this->assertInstanceOf(\EasyCorp\Bundle\EasyAdminBundle\Config\Filters::class, $result);
    }

    public function testConfigureActions(): void
    {
        $actions = $this->createMock(\EasyCorp\Bundle\EasyAdminBundle\Config\Actions::class);
        $result = $this->controller->configureActions($actions);
        
        $this->assertInstanceOf(\EasyCorp\Bundle\EasyAdminBundle\Config\Actions::class, $result);
    }




    public function testUserAttributeEntityFields(): void
    {
        $user = new BizUser();
        $user->setUsername('test@example.com');
        $user->setNickName('Test User');

        $attribute = new UserAttribute();
        $attribute->setUser($user);
        $attribute->setName('preference');
        $attribute->setValue('dark_mode');
        $attribute->setRemark('用户偏好设置');

        $this->assertEquals($user, $attribute->getUser());
        $this->assertEquals('preference', $attribute->getName());
        $this->assertEquals('dark_mode', $attribute->getValue());
        $this->assertEquals('用户偏好设置', $attribute->getRemark());
    }

    public function testUserAttributeApiArray(): void
    {
        $user = new BizUser();
        $user->setUsername('test@example.com');
        $user->setNickName('Test User');

        $attribute = new UserAttribute();
        $attribute->setUser($user);
        $attribute->setName('theme');
        $attribute->setValue('dark');

        $apiArray = $attribute->retrieveApiArray();

        $this->assertIsArray($apiArray);
        $this->assertArrayHasKey('name', $apiArray);
        $this->assertArrayHasKey('value', $apiArray);
        $this->assertEquals('theme', $apiArray['name']);
        $this->assertEquals('dark', $apiArray['value']);
    }

    public function testUserAttributeAdminArray(): void
    {
        $user = new BizUser();
        $user->setUsername('test@example.com');
        $user->setNickName('Test User');

        $attribute = new UserAttribute();
        $attribute->setUser($user);
        $attribute->setName('language');
        $attribute->setValue('zh-CN');
        $attribute->setRemark('用户语言设置');

        $adminArray = $attribute->retrieveAdminArray();

        $this->assertIsArray($adminArray);
        $this->assertArrayHasKey('name', $adminArray);
        $this->assertArrayHasKey('value', $adminArray);
        $this->assertArrayHasKey('remark', $adminArray);
        $this->assertEquals('language', $adminArray['name']);
        $this->assertEquals('zh-CN', $adminArray['value']);
        $this->assertEquals('用户语言设置', $adminArray['remark']);
    }
}